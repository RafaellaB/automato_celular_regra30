# -*- coding: utf-8 -*-
"""automato celular regra 30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zMnPAlW6JznIilroWM_xfj5Av5zytM-4
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

# Função que converte um número inteiro para sua representação binária (0 - 255)
def converte_binario(numero):
    binario = bin(numero)[2:].zfill(8)  # Representa como 8 bits
    return list(binario)

# Função para gerar padrões visuais com o autômato celular
def gerar_arte(numero_celulas, max_iteracoes, regra):
    g = np.zeros(numero_celulas)  # Geração inicial
    ng = np.zeros(numero_celulas)  # Nova geração
    codigo = converte_binario(regra)  # Obtém as regras no formato binário

    # Matriz onde cada linha armazena uma geração do autômato
    matriz_evolucao = np.zeros((max_iteracoes, numero_celulas))

    # Define a geração inicial: célula central ativa
    g[len(g)//2] = 1

    # Laço principal para atualizar as gerações
    for i in range(max_iteracoes):
        matriz_evolucao[i,:] = g
        # Percorre as células da geração atual
        for j in range(len(g)):
            # Regras de transição com base nos vizinhos (esquerda, centro, direita)
            esquerda = g[(j-1) % len(g)]
            centro = g[j]
            direita = g[(j+1) % len(g)]

            if esquerda == 0 and centro == 0 and direita == 0:
                ng[j] = int(codigo[7])
            elif esquerda == 0 and centro == 0 and direita == 1:
                ng[j] = int(codigo[6])
            elif esquerda == 0 and centro == 1 and direita == 0:
                ng[j] = int(codigo[5])
            elif esquerda == 0 and centro == 1 and direita == 1:
                ng[j] = int(codigo[4])
            elif esquerda == 1 and centro == 0 and direita == 0:
                ng[j] = int(codigo[3])
            elif esquerda == 1 and centro == 0 and direita == 1:
                ng[j] = int(codigo[2])
            elif esquerda == 1 and centro == 1 and direita == 0:
                ng[j] = int(codigo[1])
            elif esquerda == 1 and centro == 1 and direita == 1:
                ng[j] = int(codigo[0])

        g = ng.copy()  # Atualiza a geração

    return matriz_evolucao

# Função para mostrar o resultado visualmente com cores
def mostrar_arte(matriz_evolucao):
    # Define a paleta de cores
    cmap = mcolors.ListedColormap(['#FF0000', '#00FF00', '#0000FF', '#FFFF00'])  # Vermelho, Verde, Azul, Amarelo
    plt.imshow(matriz_evolucao, cmap=cmap, interpolation='nearest', aspect='auto')
    plt.axis('off')  # Não exibe os eixos
    plt.show()

# Parâmetros do autômato
numero_celulas = 101  # Número de células
max_iteracoes = 63    # Número de iterações
regra = 30            # Regra escolhida (pode ser de 0 a 255)

# Gera o padrão visual
matriz_evolucao = gerar_arte(numero_celulas, max_iteracoes, regra)

# Exibe a arte gerada
mostrar_arte(matriz_evolucao)